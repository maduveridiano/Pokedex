{"version":3,"file":"static/js/370.ca507000.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","pages/Search.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { addDoc } from \"firebase/firestore\";\r\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\r\nimport { getUserPokemons } from \"./getUserPokemons\";\r\nimport { setToast } from \"../slices/AppSlice\";\r\nimport {\r\n  pokemonStatsType,\r\n  pokemonTypeInterface,\r\n  userPokemonsType,\r\n} from \"../../utils/types\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport const addPokemonToList = createAsyncThunk(\r\n  \"pokemon/addPkemon\",\r\n  async (\r\n    pokemon: {\r\n      id: number;\r\n      name: string;\r\n      types: pokemonTypeInterface[] | string[];\r\n      stats?: pokemonStatsType[];\r\n    },\r\n    { getState, dispatch }\r\n  ) => {\r\n    try {\r\n      const {\r\n        app: { userInfo },\r\n        pokemon: { userPokemons },\r\n      } = getState() as RootState;\r\n      if (!userInfo?.email) {\r\n        return dispatch(\r\n          setToast(\"Please login in order to add pokemon to your collection.\")\r\n        );\r\n      }\r\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\r\n        return userPokemon.name === pokemon.name;\r\n      });\r\n      if (index === -1) {\r\n        let types: string[] = [];\r\n        if (!pokemon.stats) {\r\n          pokemon.types.forEach((type: any) =>\r\n            types.push(Object.keys(type).toString())\r\n          );\r\n        } else {\r\n          types = pokemon.types as string[];\r\n        }\r\n        await addDoc(pokemonListRef, {\r\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\r\n          email: userInfo.email,\r\n        });\r\n        await dispatch(getUserPokemons());\r\n        dispatch(setToast(`${pokemon.name} added to your collection.`));\r\n      } else {\r\n        dispatch(setToast(`${pokemon.name} already part of your collection.`));\r\n      }\r\n    } catch (err) {\r\n      console.log({ err });\r\n    }\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { IoGitCompare } from \"react-icons/io5\";\r\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\r\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\r\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  return (\r\n    <div className=\"pokemon-card-grid-container\">\r\n      <div className=\"pokemon-card-grid\">\r\n        {pokemons &&\r\n          pokemons.length > 0 &&\r\n          pokemons?.map((data: userPokemonsType) => {\r\n            return (\r\n              <div key={data.id} className=\"pokemon-card\">\r\n                <div className=\"pokemon-card-list\">\r\n                  {location.pathname.includes(\"/pokemon\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : location.pathname.includes(\"/search\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : (\r\n                    <FaTrash\r\n                      className=\"trash\"\r\n                      onClick={async () => {\r\n                        await dispatch(\r\n                          removePokemonFromUserList({ id: data.firebaseId! })\r\n                        );\r\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div className=\"pokemon-card-compare\">\r\n                  <IoGitCompare\r\n                    onClick={() => {\r\n                      dispatch(addToCompare(data));\r\n                      dispatch(\r\n                        setToast(\r\n                          `${data.name} has been added to compare queue.`\r\n                        )\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\r\n                <img\r\n                  src={data.image}\r\n                  alt=\"\"\r\n                  className=\"pokemon-card-image\"\r\n                  loading=\"lazy\"\r\n                  onClick={() => {\r\n                    dispatch(setPokemonTab(pokemonTabs.description));\r\n                    dispatch(setCurrentPokemon(undefined));\r\n                    navigate(`/pokemon/${data.id}`);\r\n                  }}\r\n                />\r\n                <div className=\"pokemon-card-types\">\r\n                  {data.types.map(\r\n                    (type: pokemonTypeInterface, index: number) => {\r\n                      const keys = Object.keys(type);\r\n                      return (\r\n                        <div className=\"pokemon-card-types-type\" key={index}>\r\n                          <img\r\n                            src={type[keys[0]].image}\r\n                            alt=\"pokemon type\"\r\n                            className=\"pokemon-card-types-type-image\"\r\n                            loading=\"lazy\"\r\n                          />\r\n                          <h6 className=\"pokemon-card-types-type-text\">\r\n                            {keys[0]}\r\n                          </h6>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCardGrid;\r\n","// @ts-nocheck\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport Wrapper from \"../sections/Wrapper\";\r\nimport { debounce } from \"../utils\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { getInitialPokemonData } from \"../app/reducers/getInitialPokemonData\";\r\nimport { getPokemonsData } from \"../app/reducers/getPokemonsData\";\r\nimport Loader from \"../components/Loader\";\r\nimport { setLoading } from \"../app/slices/AppSlice\";\r\n\r\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\r\n\r\nfunction Search() {\r\n  const handleChange = debounce((value: string) => getPokemon(value), 300);\r\n  const isLoading = useAppSelector(({ app: { isLoading } }) => isLoading);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const { allPokemon, randomPokemons } = useAppSelector(\r\n    ({ pokemon }) => pokemon\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getInitialPokemonData());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (allPokemon) {\r\n      const clonedPokemons = [...allPokemon];\r\n      const randomPokemonsId = clonedPokemons\r\n        .sort(() => Math.random() - Math.random())\r\n        .slice(0, 20);\r\n      dispatch(getPokemonsData(randomPokemonsId));\r\n    }\r\n  }, [allPokemon, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (randomPokemons) {\r\n      dispatch(setLoading(false));\r\n    }\r\n  }, [randomPokemons, dispatch]);\r\n\r\n  const getPokemon = async (value: string) => {\r\n    if (value.length) {\r\n      const pokemons = allPokemon.filter((pokemon) =>\r\n        pokemon.name.includes(value.toLowerCase())\r\n      );\r\n      dispatch(getPokemonsData(pokemons));\r\n    } else {\r\n      const clonedPokemons = [...allPokemon];\r\n      const randomPokemonsId = clonedPokemons\r\n        .sort(() => Math.random() - Math.random())\r\n        .slice(0, 20);\r\n      dispatch(getPokemonsData(randomPokemonsId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            className=\"pokemon-searchbar\"\r\n            placeholder=\"Search Pokemon\"\r\n          />\r\n          <PokemonCardGrid pokemons={randomPokemons} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Wrapper(Search);\r\n","import React from \"react\";\r\n\r\nconst Wrapper = (Component: React.FC) => () => {\r\n  return (\r\n    <div className=\"content\">\r\n      <Component />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n"],"names":["addPokemonToList","createAsyncThunk","pokemon","getState","dispatch","userInfo","app","userPokemons","email","setToast","findIndex","userPokemon","name","types","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","console","log","err","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","className","length","map","data","pathname","includes","onClick","removePokemonFromUserList","firebaseId","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","Wrapper","handleChange","debounce","value","getPokemon","isLoading","useAppSelector","allPokemon","randomPokemons","useEffect","getInitialPokemonData","randomPokemonsId","sort","Math","random","slice","getPokemonsData","setLoading","filter","toLowerCase","clonedPokemons","onChange","e","target","placeholder","Component"],"sourceRoot":""}